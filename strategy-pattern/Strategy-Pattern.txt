**** TEMPLATE METHOD *****

General Idea:
Idea is to pull the algorithm out into a seperate object.  A family of objects representing 'strategies' all do the same thing, but provide a different implementation. All objects should support the exact same interface.  This allows strategies to be used interchangably by the user of the strategy.

In the Report example, the strategy pattern can be used to pull out a set of strategies and relieve the main class of any responsibility or knowledge of the report file format.  Unlike the template pattern, the strategy pattern uses composition and delegation instead of inheritance.  This makes it easy to switch stategies at runtime by simply swapping startegy objects.

Sharing Data Between Context Object and Strategy Objects:
Unlike the template pattern, the strategy pattern does not use inheritance and thus requires additional considerations for getting access to the user object's data.  There are two approaches that can be used to acheive this.

	1. Pass all necesssary data to strategy object through arguments to the functions call.  This is nice because it allows complete seperation, though it can get hairy when a lot of complex data is needed to be shared.
	2. Context/user object can pass a reference to itself to the strategy object.  Strategy object then uses the reference to pull needed data.  This does allow for the possibility that the two classes will get tangled up with each other if careful consideration is not used.

In this folder:


./with_classes/*.rb                  Contains code for implementing strategy patterns where each strategy object is defined using a unique class

./with_proc/*.rb                     Contains code where each strategy object is a Proc object 


Gotcha's with Strategy Pattern:
*  Strategy object should be a self contained set of code to accomplish a specific task. 
*  Always allow for easily adding additional strategy
*  Avoid coupling context class and strategy classes to closely with one another.

Other Examples:
rdoc utility uses the Strategy pattern to extract documentation from many types of programs (Ruby, C, Fortran, etc.)
It uses a strategy object for parsing each of these.  It also allows for multiple output formats.  Each output uses a strategy object to handle outputting and correct formatting.
