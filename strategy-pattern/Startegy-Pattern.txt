**** TEMPLATE METHOD *****

General Idea:
Idea is to pull the algorithm out into a seperate object.  A family of objects representing 'strategies' all do the same thing, but provide a different implementation. All objects should support the exact same interface.  This allows strategies to be used interchangably by the user of the strategy.

In the Report example, the strategy pattern can be used to pull out a set of strategies and relieve the main class of any responsibility or knowledge of the report file format.  Unlike the template pattern, the strategy pattern uses composition and delegation instead of inheritance.  This makes it easy to switch stategies at runtime by simply swapping startegy objects.

Sharing Data Between Context Object and Strategy Objects
Unlike the template pattern, the strategy pattern does not use inheritance and thus requires additional considerations for getting access to the user object's data.  There are two approaches that can be used to acheive this.

	1. Pass all necesssary data to strategy object through arguments to the functions call.  This is nice because it allows complete seperation, though it can get hairy when a lot of complex data is needed to be shared.
	2. Context/user object can pass a reference to itself to the strategy object.  Strategy object then uses the reference to pull needed data.  This does allow for the possibility that the two classes will get tangled up with each other if careful consideration is not used.

In this folder:


./better-code/report.rb           Contains skeleton method 'output_report'
                                  and abastract method definitions that
								  are to be implemented by subclasses

./better-code/HTMLReport.rb	      Subclass that inherits from Report class
								  defined in report.rb.  It contains 
								  definitions for methods that define
								  the appropriate format for the HTML 
								  report.  These methods are called from
								  the Report skeletal class (output_report)

./better-code/PlainTextReport.rb  Subclass that inherits from Report class.
								  Contains definitions for methods that 
								  define appropriate format for plain text
								  report.  These methods are called from the								 
								  Report skeletal class (output_report)


Recipe For Using Template Pattern:

Other Examples:
 
